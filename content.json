{"pages":[{"title":"About","text":"-本科软件工程 前端小白弱鸡-QQ：2226364889","link":"/about/index.html"}],"posts":[{"title":"hello","text":"1.alert,document.write,console.log12345678&lt;head&gt; &lt;script type=&quot;text/javascript&quot;&gt; alert(&quot;在浏览器窗口弹出一个警告框&quot;); document.write(&quot;可以向body中输出一个内容&quot;); console.log(&quot;向控制台输出一个内容&quot;); &lt;/script&gt;&lt;/head&gt; 2.js attention：​ 1.严格区分大小写​ 2.必须写分号​ 3.可利用换行和空格进行格式化 3.定义变量1var a; 4.js外部引入12&lt;script src=&quot;../js/script.js&quot;&gt;&lt;/script&gt;//外部引入效率更高 &lt;script&gt;alert(&quot;我是内部js的代码&quot;);&lt;/script&gt; 5.标识符–在JS中所有的可以由我们自主命名的都可以称为标识符 –如：变量名，函数名，属性名都属于标识符 –命名标识符需要遵守的规则： ​ 1.标识符中可以含有字母，数字，_,$ ​ 2.标识符不能以数字开头 ​ 3.标识符不能是ES中的关键字或保留字 eg:var var = 123;//error ​ 4.标识符一般采用驼峰命名法–首字母小写，每个单词开头字母大写其余字母小写 eg:helloWorld 6.数据类型（字面量的类型）在JS中有六种数据类型： 基本数据类型： STRING 字符串 Number 数值 Boolean 布尔值 Null 空值 Undefined 未定义 2.引用数据类型： Object 对象 （1）String字符串–需要用引号引起来 –引号不能嵌套，双引号里不能放双引号，单引号里不能放单引号 –\\ &quot;表示” \\ ‘表示’ ​ \\t表示一个tab (2) Number数值–JS中所有数值都是Number类型 包括整数和浮点数 –JS中可以表示的数字最大值 Number.MAX_VALUE=1.7976931348623157e+308 Number.MIN_VALUE=5e-324 如果使用Number表示的数字超过了最大值，则会返回一个Infinity表示正无穷 -Infinity表示负无穷 –NaN=Not a Number –JS整数运算精确 浮点数运算不精确 –可运用 typepf 运算符来检查一个变量的类型 123456&lt;script type=&quot;text/javascript&quot;&gt; var a = 123; var b = &quot;123&quot;; console.log(typeof a); console.log(typeof b); &lt;/script&gt; console: number ​ string （3）Boolean布尔值布尔值只有两个值： true or false (4)NullNull类型只有一个，就是Null 使用typeof检查一个null值时，会返回object (5)Undefined当声明一个变量，但不赋值时，他的值就是undefined 7.强制类型转换(1)将其他数据类型强制转换成String方式一： ​ – 调用被转换数据类型的toString( )方法 ​ – 该方法不会影响到原变量，它会将转换的结果返回 ​ – 但是* 注意：null 和undefined这两个值没有toString( )方法，如果调用他们的话，会报错 12345678&lt;script type=&quot;text/javascript&quot;&gt; var a = 123; var b = a.toString(); console.log(b); console.log(typeof b); &lt;/script&gt; //输出：123 string 方式二： ​ – 使用 String( )函数，并将被转换的数据作为参数传递给函数 ​ – 使用 String( )函数做强制类型转换时， ​ 对于Number和Boolean实际上就是调用的toString( )方法 ​ 但对于null和undefined,就不会调用toString( )方法 ​ 它会将null 直接转换为”null” ​ 将 undefined 直接转换为”undefined” 123456 var a = undefined; var b = String(a); console.log(b); console.log(typeof b);//输出：undefined string (2)Number强制类型转换方式一： ​ –字符串—&gt;数字 如果是纯数字字符串，则直接转换为数字 如果字符串中有非数字内容，则转换为NaN 123456var a = &quot;123abc&quot;;var b = Number(a);console.log(b);console.log(typeof b);//输出：NaN number 如果字符串是一个空串或是一个全是空格的字符 123456var a = &quot; &quot;;var b = Number(a);console.log(b);console.log(typeof b);//输出：0 number ​ –布尔—&gt;数字 ​ true 转成 1 ​ false 转成 0 12345var a = true;var b = Number(a);console.log(b);console.log(typeof b);//输出：1 number ​ –null –&gt;数字 0 ​ –undefined –&gt; 数字NaN 方式二： –这种方法专门对付字符串 –parseInt( )把一个字符串转换为一个整数 –parseFloat( )把一个字符串转换为一个浮点数 123456a = 1234.567;a = parseFloat(a);console.log(a);console.log(typeof a);//输出：1234.567 number (3)Boolean强制类型转换 –使用Boolean函数 ​ –数字—&gt;布尔 ​ 除了0和NaN，其余都是true 123456var a = 0;a = Boolean(a);console.log(a);console.log(typeof a);//输出：false boolean ​ –字符串—&gt;布尔 ​ 除了空串，其余都是true ​ –null和undefined 都是false ​ –对象也会转换为true 8.进制js中：0x–16进制 ​ 0–8进制 ​ 0b–2进制 可以在parseInt( )中传递第二个参数，指定数字进制 123456a = 070;a = parseInt(a,10);console.log(a);console.log(typeof a);//输出：56 number 9.运算符（操作符） 算术运算符 当对非Number类型值进行运算时，会将这些值转换成Number 任何值和NaN运算时，都得NaN +： ​ (1)如果对两个字符串进行加法，进行拼串处理 123456var result;result = &quot;123&quot;+&quot;456&quot;console.log(result);console.log(typeof result);输出：123456 string ​ (2)写长字符串 123456789var result;result = &quot;锄禾日当午，&quot;+ &quot;汗滴禾下土，&quot;+ &quot;谁知盘中餐，&quot;+ &quot;粒粒皆辛苦。&quot;;console.log(result);console.log(typeof result);//输出：锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦。 string ​ （3）任何值和字符串做加法，都会先转换为字符串，然后拼串. 1234var result;result = 123 + &quot;abc&quot;;console.log(result);//输出：123abc ​ 可利用这一特点，将任意类型转换为String:c = c + “” 1234var c = 123;c = c + &quot;&quot;;console.log(&quot;c = &quot;+c);//输出：c = 123 -,*,/运算时都自动转换成number,可通过为一个值-0，/1,×1，来转换成number 123456var c = 123;c = c - 0;console.log(c);console.log(typeof c);//输出：123 number % 123456var c = 9;c = 9%3;console.log(c);console.log(typeof c);//输出：0 number 一元运算符 +对一个非number类型可通过+ 转变成number，原理和Number( )一样 12345var c = 1+ +&quot;2&quot;+3;console.log(c);console.log(typeof c);//输出：6 number - 自增 1234var d = 20;var result = d++ + ++d +d //20+22+22console.log(result);输出：64 123456789101112131415161718var n1 = 10;var n2 = 20;var n = n1++;console.log('n='+n);//10console.log('n1='+n1);//11 n = ++n1;//n1 = 12 ++n1 = 12console.log('n='+n);//12console.log('n1='+n1);//12 n = n2--;console.log('n='+n);//20console.log('n2='+n2);//19 n = --n2;console.log('n='+n);//18console.log('n2='+n);//18 逻辑运算符 (1)! 非运算，对一个值进行取反操作,两次取反则不会变化 12345var a = false;a = !a;console.log(a);、//输出：true bollean 为任意的数据类型做两次非运算，即可将其转换为布尔值 123456var a = &quot;hello&quot;;a = !!a;console.log(a);console.log(typeof a);输出：true boolean (2)&amp;&amp;运算(找false) 有两个true则返回true,只要有一个false就返回false ​ –第一个值为true，会检查第二个值；必然返回第二个值 ​ –第一个值为false,不会检查第二个值；则直接返回第一个值 1false&amp;&amp;alert(&quot;看我出不出来&quot;); ​ –若两个值都为true，则返回后面的 123var a=5&amp;&amp;6;console.log(a);输出：6 ​ –若两个值都为false，则返回靠前的false 123var a=0&amp;&amp;NaN;console.log(a);//输出：0 ​ (3)||运算(找true) 只要有一个true，就返回true 两个都为false，才返回false –第一个值为false,则会看第二个值，直接返回第二个值 –第一个值为true,则不会看第二个值，直接返回第一个值 赋值运算符 a +=5;之类的 关系运算符 &lt;&gt;= –对于非数值进行比较时，会转换为数字再比较 –如果符号两侧都是字符串，不会将其转换为数字进行比较而会分别比较字符串的Unicode编码;如果两位一样则比较下一位 –任何值和NaN比较都是 false 12345678```* unicode编码 (1)js中 ```js console.log(&quot;\\u****&quot;); (2)网页中 &amp;#这里需要10进制 相等运算符 用来比较两个值是否相等，如果相等返回true，否则返回false (1)==表示相等 –使用==比较时，类型不同时，会自动进行类型转换 1234console.log(undefined==null);/trueconsole.log(0==null);//falseconsole.log(&quot;1&quot;==1);//trueconsole.log(NaN==NaN);//false NaN不和任何值相等，可通过isNaN函数来判断一个数是不是NaN 123var a=NaN;console.log(isNaN(a));输出：true ​ (2)不相等！= 用来比较两个值是否不相等，如果不相等返回true，否则返回false （3）全等=== 和相等类似，但不进行类型转换 （4）不全等！== 同上 条件运算符 条件表达式？语句一：语句二 若条件为true，则执行语句一，否则语句二 12345var a=43;var b=30;var max=a&gt;b?a:b;console.log(max);//输出：43 优先级 &amp;&amp; 大于||","link":"/2022/03/20/Day%201.JS%202022320/"},{"title":"Test","text":"这里开始 123import zingprint(&quot;hello zing!&quot;) test2 1&lt;script&gt;alert(/xss/)&lt;/script&gt; 流逝洒哎哎哎啊6","link":"/2022/05/17/hh/"},{"title":"Test","text":"1&lt;script&gt;alert(/xss/)&lt;/script&gt;","link":"/2022/05/18/index/"}],"tags":[],"categories":[]}